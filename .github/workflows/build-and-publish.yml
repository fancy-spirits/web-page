name: Build and publish Webpage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-web:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PWD }}
        
    - name: Pull most recent image
      run: docker pull doxblek/fancy-spirits-webpage:latest
      
    - name: Create Version Tag
      run: echo "TAG=$(date +%s)" >> $GITHUB_ENV

    - name: Load docker cache
      uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
        
    - name: Build the Docker image (Web)
      run: |
        docker build . --file Dockerfile --tag doxblek/fancy-spirits-webpage:$TAG --tag doxblek/fancy-spirits-webpage:latest
        
    - name: Push the Docker Image 
      run: |
        docker push doxblek/fancy-spirits-webpage:$TAG
        docker push doxblek/fancy-spirits-webpage:latest

  build-db:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PWD }}

    - name: Pull most recent image
      run: docker pull doxblek/fancy-spirits-webpage-db:latest
      
    - name: Create Version Tag
      run: echo "TAG=$(date +%s)" >> $GITHUB_ENV

    - name: Load docker cache
      uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    - name: Build the Docker image (DB)
      run: |
        cd database
        docker build . --file Dockerfile --tag doxblek/fancy-spirits-webpage-db:$TAG --tag doxblek/fancy-spirits-webpage-db:latest
        
    - name: Push the Docker Image 
      run: |
        docker push doxblek/fancy-spirits-webpage-db:$TAG
        docker push doxblek/fancy-spirits-webpage-db:latest

  build-api:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PWD }}

    - name: Pull most recent image
      run: docker pull doxblek/fancy-spirits-webpage-api:latest
      
    - name: Create Version Tag
      run: echo "TAG=$(date +%s)" >> $GITHUB_ENV

    - name: Load docker cache
      uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true

    - name: Build the Docker image (API)
      run: |
        cd api
        docker build . --file Dockerfile --tag doxblek/fancy-spirits-webpage-api:$TAG --tag doxblek/fancy-spirits-webpage-api:latest
        
    - name: Push the Docker Image 
      run: |
        docker push doxblek/fancy-spirits-webpage-api:$TAG
        docker push doxblek/fancy-spirits-webpage-api:latest
        
  deploy:
    needs:
      - build-web
      - build-db
      - build-api

    runs-on: ubuntu-latest

    steps:
      - name: Stop old deployment
        continue-on-error: true
        uses: cross-the-world/ssh-pipeline@master
        env:
          DEPLOY_DIR: ${{ secrets.SSH_TARGET_DIR }}
        with:
          host: ${{ secrets.SSH_HOST }}
          user: ${{ secrets.SSH_USER }}
          pass: ${{ secrets.SSH_USER_PWD }}
          script: |
            cd $DEPLOY_DIR
            docker compose down 

      - name: Transfer new docker-compose.yml
        uses: cross-the-world/ssh-pipeline@master
        env:
          DEPLOY_DIR: ${{ secrets.SSH_TARGET_DIR }}
        with:
          host: ${{ secrets.SSH_HOST }}
          user: ${{ secrets.SSH_USER }}
          pass: ${{ secrets.SSH_USER_PWD }}
          script: |
            cd $DEPLOY_DIR
            rm -rf ./*
            git clone https://github.com/fancy-spirits/web-page.git
            mv web-page/* .
            cat ./database/1-init-users.sh

      - name: Run new deployment
        uses: cross-the-world/ssh-pipeline@master
        env:
          DEPLOY_DIR: ${{ secrets.SSH_TARGET_DIR }}
          POSTGRES_FANCY_SPIRITS_USER: ${{ secrets.POSTGRES_FANCY_SPIRITS_USER }}
          POSTGRES_FANCY_SPIRITS_PASSWORD: ${{ secrets.POSTGRES_FANCY_SPIRITS_PASSWORD }}
          POSTGRES_ADMIN_USER: ${{ secrets.POSTGRES_ADMIN_USER }}
          POSTGRES_ADMIN_PASSWORD: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
          POSTGRES_DB_NAME: ${{ secrets.POSTGRES_DB_NAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          user: ${{ secrets.SSH_USER }}
          pass: ${{ secrets.SSH_USER_PWD }}
          script: |
            cd $DEPLOY_DIR
            docker compose stop
            docker compose rm -f
            docker compose pull
            POSTGRES_DB=$POSTGRES_DB_NAME POSTGRES_DB_NAME=$POSTGRES_DB_NAME POSTGRES_ADMIN_USER=$POSTGRES_ADMIN_USER POSTGRES_USER=$POSTGRES_ADMIN_USER POSTGRES_ADMIN_PASSWORD=$POSTGRES_ADMIN_PASSWORD POSTGRES_PASSWORD=$POSTGRES_ADMIN_PASSWORD POSTGRES_FANCY_SPIRITS_USER=$POSTGRES_FANCY_SPIRITS_USER POSTGRES_FANCY_SPIRITS_PASSWORD=$POSTGRES_FANCY_SPIRITS_PASSWORD docker compose up -d